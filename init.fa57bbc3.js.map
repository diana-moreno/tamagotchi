{"version":3,"sources":["ui.js","src/constants.js","src/gameState.js","src/buttons.js","src/init.js"],"names":["modFox","state","document","querySelector","className","modScene","togglePoopBag","show","classList","toggle","toggleModal","writeModal","text","innerHTML","toggleIcons","ICONS","SCENES","TICK_RATE","RAIN_CHANGE","DAY_LENGTH","NIGHT_LENGTH","getNextHungerTime","clock","Math","floor","random","getNextDieTime","getNextPoopTime","gameState","current","wakeTime","sleepTime","hungryTime","poopTime","dieTime","timeToStartCelebrating","timeToStopCelebrating","tick","wake","sleep","getHungry","die","startCelebrating","stopCelebrating","poop","startGame","scene","determineFoxState","clearTimes","handleUserAction","icon","includes","changeWeather","cleanUpPoop","feed","length","bind","toggleHighlighted","initButtons","selectedIcon","addEventListener","buttonClick","target","contains","init","newtTimeToTick","Date","now","requestAnimationFrame","nextAnimationFrame"],"mappings":"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","file":"init.fa57bbc3.js","sourceRoot":"..","sourcesContent":["export const modFox = function modFox(state) {\n  document.querySelector(\".fox\").className = `fox fox-${state}`;\n};\n\nexport const modScene = function modScene(state) {\n  document.querySelector(\".game\").className = `game ${state}`;\n};\n\nexport const togglePoopBag = function togglePoopBag(show) {\n  document.querySelector(\".poop-bag\").classList.toggle(\"hidden\", !show);\n};\n\nexport const toggleModal = function toggleModal(show) {\n  document.querySelector(\".modal\").classList.toggle(\"hidden\", !show);\n};\n\nexport const writeModal = function writeModal(text) {\n  document.querySelector(\".modal-inner\").innerHTML = text;\n};\n\nexport const toggleIcons = function toggleIcons(show) {\n  document.querySelector(\".icons\").classList.toggle(\"hidden\", !show);\n};\n","export const ICONS = [\"fish\", \"poop\", \"weather\"];\nexport const SCENES = [\"day\", \"rain\"];\nexport const TICK_RATE = 3000;\nexport const RAIN_CHANGE = 0.2;\nexport const DAY_LENGTH = 60;\nexport const NIGHT_LENGTH = 5;\n\nexport const getNextHungerTime = (clock) =>\n  Math.floor(Math.random() * 3) + 8 + clock; // 5 - 6 - 7 + clock\n\nexport const getNextDieTime = (clock) =>\n  Math.floor(Math.random() * 3) + 3 + clock;\n\nexport const getNextPoopTime = (clock) =>\n  Math.floor(Math.random() * 3) + 8 + clock;\n","import {\n  modFox,\n  modScene,\n  togglePoopBag,\n  toggleModal,\n  writeModal,\n  toggleIcons,\n} from \"../ui\";\nimport {\n  RAIN_CHANGE,\n  SCENES,\n  DAY_LENGTH,\n  NIGHT_LENGTH,\n  getNextHungerTime,\n  getNextDieTime,\n  getNextPoopTime,\n} from \"./constants\";\n\nconst gameState = {\n  current: \"INIT\",\n  clock: 1,\n  wakeTime: -1,\n  sleepTime: -1,\n  hungryTime: -1,\n  poopTime: -1,\n  dieTime: -1,\n  timeToStartCelebrating: -1,\n  timeToStopCelebrating: -1,\n\n  tick() {\n    this.clock++;\n    if (this.clock === this.wakeTime) {\n      this.wake();\n    } else if (this.clock === this.sleepTime) {\n      this.sleep();\n    } else if (this.clock === this.hungryTime) {\n      this.getHungry();\n    } else if (this.clock === this.dieTime) {\n      this.die();\n    } else if (this.clock === this.timeToStartCelebrating) {\n      this.startCelebrating();\n    } else if (this.clock === this.timeToStopCelebrating) {\n      this.stopCelebrating();\n    } else if (this.clock === this.poopTime) {\n      this.poop();\n    }\n    return this.clock;\n  },\n  startGame() {\n    this.current = \"HATCHING\";\n    this.wakeTime = this.clock + 3;\n    modFox(\"egg\");\n    modScene(\"day\");\n    toggleModal(false);\n    toggleIcons(true);\n  },\n  wake() {\n    this.current = \"IDLING\";\n    this.wakeTime = -1;\n    this.scene = Math.random() > RAIN_CHANGE ? 0 : 1;\n    modScene(SCENES[this.scene]);\n    this.sleepTime = this.clock + DAY_LENGTH;\n    this.hungryTime = getNextHungerTime(this.clock);\n    this.determineFoxState();\n  },\n  sleep() {\n    this.current = \"SLEEP\";\n    modFox(\"sleep\");\n    modScene(\"night\");\n    this.clearTimes();\n    this.wakeTime = this.clock + NIGHT_LENGTH;\n  },\n  clearTimes() {\n    this.wakeTime = -1;\n    this.sleepTime = -1;\n    this.hungryTime = -1;\n    this.poopTime = -1;\n    this.dieTime = -1;\n    this.timeToStartCelebrating = -1;\n    this.timeToStopCelebrating = -1;\n  },\n  getHungry() {\n    this.current = \"HUNGRY\";\n    this.dieTime = getNextDieTime(this.clock);\n    this.hungryTime = -1;\n    modFox(\"hungry\");\n  },\n  poop() {\n    this.current = \"POOPING\";\n    this.poopTime = -1;\n    this.dieTime = getNextDieTime(this.clock);\n    modFox(\"pooping\");\n  },\n  die() {\n    this.current = \"DEAD\";\n    modScene(\"dead\");\n    modFox(\"dead\");\n    this.clearTimes();\n    writeModal(\"The fox died!\\n Press middle button to play again.\");\n    toggleModal(true);\n    toggleIcons(false);\n  },\n  startCelebrating() {\n    this.current = \"CELEBRATING\";\n    modFox(\"celebrate\");\n    this.timeToStartCelebrating = -1;\n    this.timeToStopCelebrating = this.clock + 2;\n  },\n  stopCelebrating() {\n    this.timeToStopCelebrating = -1;\n    this.current = \"IDLING\";\n    this.determineFoxState();\n    togglePoopBag(false);\n  },\n  determineFoxState() {\n    if (this.current === \"IDLING\") {\n      if (SCENES[this.scene] === \"rain\") {\n        modFox(\"rain\");\n      } else {\n        modFox(\"idling\");\n      }\n    }\n  },\n  handleUserAction(icon) {\n    if (\n      [\"SLEEP\", \"FEEDING\", \"CELEBRATING\", \"HATCHING\"].includes(this.current)\n    ) {\n      // do nothing\n      return;\n    }\n    if (this.current === \"INIT\" || this.current === \"DEAD\") {\n      this.startGame();\n      return;\n    }\n\n    switch (icon) {\n      case \"weather\":\n        this.changeWeather();\n        break;\n      case \"poop\":\n        this.cleanUpPoop();\n        break;\n      case \"fish\":\n        this.feed();\n        break;\n    }\n  },\n  changeWeather() {\n    this.scene = (this.scene + 1) % SCENES.length;\n    modScene(SCENES[this.scene]);\n    this.determineFoxState();\n  },\n  cleanUpPoop() {\n    if (this.current !== \"POOPING\") {\n      return;\n    }\n    this.dieTime = -1;\n    togglePoopBag(true);\n    this.startCelebrating();\n    this.hungryTime = getNextHungerTime(this.clock);\n  },\n  feed() {\n    if (this.current !== \"HUNGRY\") {\n      return;\n    }\n    this.current = \"FEEDING\";\n    this.dieTime = -1;\n    this.poopTime = getNextPoopTime(this.clock);\n    modFox(\"eating\");\n    this.timeToStartCelebrating = this.clock + 2;\n  },\n};\n\nexport const handleUserAction = gameState.handleUserAction.bind(gameState);\nexport default gameState;\n","import { ICONS } from \"./constants\";\n\nconst toggleHighlighted = (icon, show) =>\n  document\n    .querySelector(`.${ICONS[icon]}-icon`)\n    .classList.toggle(\"highlighted\", show);\n\nexport default function initButtons(handleUserAction) {\n  let selectedIcon = 0;\n\n  function buttonClick({ target }) {\n    if (target.classList.contains(\"left-btn\")) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (2 + selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else if (target.classList.contains(\"right-btn\")) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (1 + selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else {\n      handleUserAction(ICONS[selectedIcon]);\n    }\n  }\n  document.querySelector(\".buttons\").addEventListener(\"click\", buttonClick);\n}\n","import gameState, { handleUserAction } from \"./gameState\";\n\nimport { TICK_RATE } from \"./constants\";\nimport initButtons from \"./buttons\";\nimport { toggleIcons } from \"../ui\";\n\n// not use setinterval\n\nfunction init() {\n  toggleIcons(false);\n  initButtons(handleUserAction);\n\n  let newtTimeToTick = Date.now();\n\n  function nextAnimationFrame() {\n    const now = Date.now();\n\n    if (newtTimeToTick <= now) {\n      gameState.tick();\n      newtTimeToTick = now + TICK_RATE;\n    }\n    requestAnimationFrame(nextAnimationFrame);\n  }\n  requestAnimationFrame(nextAnimationFrame); // first call\n  // nextAnimationFrame()); // first call\n}\n\ninit();\n"]}